from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.support.db import init_db
from app.settings import secrets
import logging
import sqlite3
import asyncio

BOT_TOKEN = secrets.get('support_token')
ADMIN_CHAT_ID = secrets.get('admin_id')

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


class SupportStates(StatesGroup):
    WAITING_USER_REPLY = State()
    ADMIN_REPLY = State()


# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ======================

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ CheezyVPN. "
                         "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    await state.set_state(SupportStates.WAITING_USER_REPLY)


@dp.message(SupportStates.WAITING_USER_REPLY)
async def user_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    conn = sqlite3.connect('support.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
                   (user_id, username, full_name))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = message.text or message.caption or "[–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ]"
    cursor.execute("INSERT INTO messages (user_id, message_text) VALUES (?, ?)",
                   (user_id, message_text))
    conn.commit()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (@{username})"
    user_link = f"<a href='tg://user?id={user_id}'>–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç</a>"

    if message.text:
        text_content = f"‚úâÔ∏è <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n{user_info}\nID: {user_id}\n\n{message.text}\n\n{user_link}"
    else:
        text_content = f"‚úâÔ∏è <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n{user_info}\nID: {user_id}\n\n[–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ]\n\n{user_link}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=text_content,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å",
                                                                                 callback_data=f"reply_{user_id}")]])
    )

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()


# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
# ======================

@dp.callback_query(F.data.startswith('reply_'))
async def process_callback_reply(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split('_')[1])
    await bot.answer_callback_query(callback.id)

    # –ü–û–õ–£–ß–ê–ï–ú –ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ë–î
    conn = sqlite3.connect('support.db')
    cursor = conn.cursor()
    cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    conn.close()

    username = user_data[0] if user_data else "unknown"

    await state.set_state(SupportStates.ADMIN_REPLY)
    await state.update_data(target_user=user_id)

    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:"
    )


@dp.message(SupportStates.ADMIN_REPLY)
async def admin_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('target_user')

    if not user_id:
        await message.reply("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    try:
        # –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –ë–î
        conn = sqlite3.connect('support.db')
        cursor = conn.cursor()
        cursor.execute("SELECT username, full_name FROM users WHERE user_id = ?", (user_id,))
        user_data = cursor.fetchone()
        conn.close()

        if not user_data:
            await message.reply("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
            return

        username = user_data[0]
        full_name = user_data[1]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if message.text:
            await bot.send_message(
                chat_id=user_id,
                text=f"üë®‚Äçüíª <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ CheezyVPN:</b>\n\n{message.text}",
                parse_mode="HTML"
            )
            await bot.send_message(
                chat_id=user_id,
                text=f"üë®‚Äçüíª <b>–û—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã? - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start</b>\n\n",
                parse_mode="HTML"
            )
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î)
        await message.reply(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_name} (@{username})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    await state.clear()


if __name__ == '__main__':
    init_db()  # –°–æ–∑–¥–∞–µ–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(dp.start_polling(bot))
