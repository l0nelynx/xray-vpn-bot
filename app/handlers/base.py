import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.types import LabeledPrice, PreCheckoutQuery
from app.settings import bot
from app.handlers.events import start_bot, stop_bot, userlist
from app.utils import check_amount
from app.handlers.events import main_menu, main_call
import app.database.requests as rq
import app.marzban.marzban as mz
from app.keyboards import payment_keyboard
import app.keyboards as kb
from app.settings import Secrets

router = Router()
# vpn = mz.MarzbanAsync()


@router.message(Command("start"))
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await main_menu(message)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π


@router.message(Command("users"), F.from_user.id == Secrets.admin_id)
async def user_db_check(message: Message):
    await userlist()


@router.callback_query(F.data == 'Main')
async def others(callback: CallbackQuery):
    await callback.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é')
    await main_call(callback)


@router.callback_query(F.data == 'Others')
async def others(callback: CallbackQuery):
    await callback.answer('–†–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:', reply_markup=kb.others)


@router.callback_query(F.data == 'Premium')
async def premium(callback: CallbackQuery):
    async with mz.MarzbanAsync() as marz:
            await callback.answer('–ü–æ–∫—É–ø–∫–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏')
            user_info = await marz.get_user(name=callback.from_user.username)
            if user_info == 404:
                print(user_info)
                await callback.message.answer('–¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ+–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=kb.pay_methods)
            else:
                print(user_info["username"])
                await callback.message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞+–¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è')


@router.callback_query(F.data == 'Free')
async def premium(callback: CallbackQuery):
    async with mz.MarzbanAsync() as marz:
        await callback.answer('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (5 –ì–± –≤ –º–µ—Å—è—Ü)')
        user_info = await marz.get_user(name=callback.from_user.username)
        if user_info == 404:
            print(user_info)
            buyer_nfo = await marz.add_user(
                template=mz.vless_template,
                name=f"{callback.from_user.username}",
                usrid=f"{callback.from_user.id}",
                limit=5*1024*1024*1024,
                res_strat="month"  # no_reset day week month year
            )
            sub_link = buyer_nfo["subscription_url"]
            await callback.message.answer(text=f"ü•≥–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                                      f"—Å—Å—ã–ª–∫–∞:<code>{sub_link}</code>",parse_mode="HTML", reply_markup=kb.connect(sub_link))
        else:
            print(user_info["username"])
            sub_link = user_info["subscription_url"]
            await callback.message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞')
            await callback.message.answer(text=f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                                               f"—Å—Å—ã–ª–∫–∞:<code>{sub_link}</code>",parse_mode="HTML", reply_markup=kb.connect(sub_link))


@router.callback_query(F.data == 'Stars_Plans')
async def stars_plan(callback: CallbackQuery):
    await callback.answer('–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω', reply_markup=kb.pay_tariffs)


@router.callback_query(F.data == 'Month_Plan')
async def stars_month_plan(callback: CallbackQuery):
    await callback.answer('–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü')
    prices = [LabeledPrice(label="XTR", amount=1)]
    await bot.send_invoice(
        callback.from_user.id,
        title="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü",
        description=f"–ü–æ–∫—É–ø–∫–∞ –∑–∞ 1 ‚≠êÔ∏è!",
        prices=prices,
        provider_token="",
        payload="channel_support",
        currency="XTR",
        reply_markup=payment_keyboard(check_amount(1)),
    )
    logging.info("–ó–∞–ø—É—Å–∫–∞—é –∏–Ω–≤–æ–π—Å")


@router.message(Command("donate"))
async def send_invoice_handler(message: Message, command: CommandObject):
    prices = [LabeledPrice(label="XTR", amount=check_amount(command.args))]
    await message.answer_invoice(
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–Ω–∞–ª–∞",
        description=f"–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–µ—Ä–≤–∏—Å –Ω–∞ {check_amount(command.args)} ‚≠êÔ∏è!",
        prices=prices,
        provider_token="",
        payload="channel_support",
        currency="XTR",
        reply_markup=payment_keyboard(check_amount(command.args)),
    )
    logging.info("–ó–∞–ø—É—Å–∫–∞—é –∏–Ω–≤–æ–π—Å")


@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    logging.info("–ó–∞–ø—É—Å–∫–∞—é pre_checkout_handler")
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def success_payment_handler(message: Message):
    await message.answer(text="ü•≥–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!ü§ó")
    async with mz.MarzbanAsync() as marz:
        buyer_nfo = await marz.add_user(
            template=mz.vless_template,
            name=f"{message.from_user.username}",
            usrid=f"{message.from_user.id}",
            limit=0,
            res_strat="month"  # no_reset day week month year
        )
        sub_link = buyer_nfo["subscription_url"]
        await message.answer(text=f"ü•≥–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                            f"—Å—Å—ã–ª–∫–∞:<code>{sub_link}</code>",parse_mode="HTML")
