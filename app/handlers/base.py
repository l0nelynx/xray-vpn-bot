import logging
import time
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram.types import LabeledPrice, PreCheckoutQuery
from app.settings import bot
from app.handlers.events import start_bot, stop_bot, userlist
from app.utils import check_amount
from app.handlers.events import main_menu, main_call
from app.locale.lang_ru import text_help
import app.database.requests as rq
import app.marzban.marzban as mz
from app.keyboards import payment_keyboard
import app.keyboards as kb
from app.settings import Secrets

router = Router()
# vpn = mz.MarzbanAsync()


@router.message(Command("start"))
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await main_menu(message)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π


@router.message(Command("users"), F.from_user.id == Secrets.admin_id)
async def user_db_check(message: Message):
    await userlist()


@router.callback_query(F.data == 'Main')
async def others(callback: CallbackQuery):
    await callback.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é')
    await main_call(callback)


@router.callback_query(F.data == 'Others')
async def others(callback: CallbackQuery):
    await callback.answer('–†–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:', reply_markup=kb.others)


@router.callback_query(F.data == 'Android_Help')
async def others(callback: CallbackQuery):
    await callback.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android')
    await callback.message.answer(text=text_help, parse_mode='HTML', disable_web_page_preview=True, reply_markup=kb.others)


@router.callback_query(F.data == 'Premium')
async def premium(callback: CallbackQuery):
    async with mz.MarzbanAsync() as marz:
            await callback.answer('–ü–æ–∫—É–ø–∫–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏')
            user_info = await marz.get_user(name=callback.from_user.username)
            if user_info == 404:
                print(user_info)
                await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=kb.pay_methods)
            else:
                limit = user_info["data_limit"]
                print(limit)
                status = user_info["status"]
                if status == "active":
                    if limit is None:
                        await callback.message.answer('Premium –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–µ –ø—Ä–æ–¥–ª–∏—Ç—å\n'
                                                      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=kb.pay_methods)
                    else:
                        await callback.message.answer('–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n'
                                                        '–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–µ –ø—Ä–æ–∞–ø–≥—Ä–µ–π–¥–∏—Ç—å –¥–æ Premium\n', reply_markup=kb.pay_methods)
                else:
                    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=kb.pay_methods)


@router.callback_query(F.data == 'Free')
async def premium(callback: CallbackQuery):
    async with mz.MarzbanAsync() as marz:
        await callback.answer('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (5 –ì–± –≤ –º–µ—Å—è—Ü)')
        user_info = await marz.get_user(name=callback.from_user.username)
        if user_info == 404:
            print(user_info)
            buyer_nfo = await marz.add_user(
                template=mz.vless_template,
                name=f"{callback.from_user.username}",
                usrid=f"{callback.from_user.id}",
                limit=5*1024*1024*1024,
                res_strat="month",  # no_reset day week month year
                expire=(int(time.time()+30*24*60*60))
            )
            expire_day = round((buyer_nfo["expire"] - time.time()) / (24 * 60 * 60))
            sub_link = buyer_nfo["subscription_url"]
            await callback.message.answer(text=f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞</b>\n"
                                               f"–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–Ω–µ–π: {expire_day}\n"
                                               f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                                               f"<code>{sub_link}</code>",parse_mode="HTML", reply_markup=kb.connect(sub_link))
        else:
            print(user_info["username"])
            sub_link = user_info["subscription_url"]
            status = user_info["status"]
            expire_day = round((user_info["expire"] - time.time()) / (24 * 60 * 60))
            if status == "active":
                await callback.message.answer(text=f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞</b>\n"
                                                   f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {expire_day}\n"
                                                   f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                                                   f"<code>{sub_link}</code>",parse_mode="HTML", reply_markup=kb.connect(sub_link))
            else:
                buyer_nfo = await marz.set_user(
                template=mz.vless_template,
                name=f"{callback.from_user.username}",
                limit=5*1024*1024*1024,
                res_strat="month",  # no_reset day week month year
                expire=(int(time.time()+30*24*60*60))
                )
                await callback.message.answer(text=f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞</b>\n"
                                                   f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {expire_day}\n"
                                                   f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                                                   f"<code>{sub_link}</code>",parse_mode="HTML", reply_markup=kb.connect(sub_link))


@router.callback_query(F.data == 'Stars_Plans')
async def stars_plan(callback: CallbackQuery):
    await callback.answer('–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω', reply_markup=kb.pay_tariffs)


@router.callback_query(F.data == 'Month_Plan')
async def stars_month_plan(callback: CallbackQuery):
    await callback.answer('–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü')
    prices = [LabeledPrice(label="XTR", amount=150)]
    await bot.send_invoice(
        callback.from_user.id,
        title="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü",
        description=f"–ü–æ–∫—É–ø–∫–∞ –∑–∞ 150 ‚≠êÔ∏è!",
        prices=prices,
        provider_token="",
        payload="channel_support",
        currency="XTR",
        reply_markup=payment_keyboard(check_amount(150)),
    )
    logging.info("–ó–∞–ø—É—Å–∫–∞—é –∏–Ω–≤–æ–π—Å")


@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    logging.info("–ó–∞–ø—É—Å–∫–∞—é pre_checkout_handler")
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def success_payment_handler(message: Message):
    await message.answer(text="ü•≥–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!ü§ó")
    async with mz.MarzbanAsync() as marz:
        # await message.answer('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (5 –ì–± –≤ –º–µ—Å—è—Ü)')
        user_info = await marz.get_user(name=message.from_user.username)
        if user_info == 404:
            print(user_info)
            buyer_nfo = await marz.add_user(
                template=mz.vless_template,
                name=f"{message.from_user.username}",
                usrid=f"{message.from_user.id}",
                limit=0,
                res_strat="no_reset",  # no_reset day week month year
                expire=(int(time.time()+30*24*60*60))
            )
            expire_day = round((buyer_nfo["expire"] - time.time()) / (24 * 60 * 60))
            sub_link = buyer_nfo["subscription_url"]
            await message.answer(text=f"‚ù§Ô∏èC–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                                      f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞</b>\n"
                                               f"–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–Ω–µ–π: {expire_day}\n"
                                               f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                                               f"<code>{sub_link}</code>",parse_mode="HTML", reply_markup=kb.connect(sub_link))
        else:
            print(user_info["username"])
            sub_link = user_info["subscription_url"]
            status = user_info["status"]
            limit = user_info["data_limit"]
            expire_day = round((user_info["expire"] - time.time()) / (24 * 60 * 60))
            if status == "active" and limit is None:
                buyer_nfo = await marz.set_user(
                    template=mz.vless_template,
                    name=f"{message.from_user.username}",
                    limit=0,
                    res_strat="no_reset",  # no_reset day week month year
                    expire=(int(time.time()+(expire_day+30)*24*60*60))
                )
                await message.answer(text=f"‚ù§Ô∏èC–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                                          f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –µ—â–µ –Ω–∞ –º–µ—Å—è—Ü</b>\n"
                                                   f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {expire_day+30}\n"
                                                   f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                                                   f"<code>{sub_link}</code>",parse_mode="HTML", reply_markup=kb.connect(sub_link))

            else:
                buyer_nfo = await marz.set_user(
                    template=mz.vless_template,
                    name=f"{message.from_user.username}",
                    limit=0,
                    res_strat="no_reset",  # no_reset day week month year
                    expire=(int(time.time()+30*24*60*60))
                )
                await message.answer(text=f"‚ù§Ô∏èC–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                                          f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n"
                                                   f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {30}\n"
                                                   f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                                                   f"<code>{sub_link}</code>",parse_mode="HTML", reply_markup=kb.connect(sub_link))

