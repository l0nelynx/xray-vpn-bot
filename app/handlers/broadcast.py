import asyncio
from aiogram import Bot
from aiogram.types import Message

# –í–∞—à–∞ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from app.database.requests import get_users
from app.settings import secrets

ADMIN_IDS = [secrets.get('admin_id')]


async def broadcast_message(bot: Bot, message_text: str, parse_mode: str = 'HTML', test_flag: int):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # result = await session.execute(select(User))
        result = await get_users()
        print(result)
        users = result.all()

        success_count = 0
        fail_count = 0
        failed_users = []
        if test_flag == 0:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for user in users:
                try:
                    await bot.send_message(
                        chat_id=user.tg_id,
                        text=message_text,
                        parse_mode=parse_mode
                    )
                    success_count += 1

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                    await asyncio.sleep(0.1)

                except Exception as e:
                    fail_count += 1
                    failed_users.append((user.tg_id, str(e)))
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")
        else:
            await bot.send_message(
                        chat_id=secrets.get('admin_id'),
                        text=message_text,
                        parse_mode=parse_mode
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        report = (
            f"üìä <b>–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</b>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
        )

        return report, failed_users

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}", []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_broadcast(message: Message, test_flag: int):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:  # ADMIN_IDS - —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤—Å—ë –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast)
    broadcast_text = message.text.replace('/broadcast', '').strip()

    if not broadcast_text:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await message.answer("üì® –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...")

    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    report, failed_users = await broadcast_message(message.bot, broadcast_text, test_flag)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await message.answer(report, parse_mode='HTML')

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
    if failed_users:
        error_details = "\n".join(
            [f"ID: {uid}, –û—à–∏–±–∫–∞: {error}" for uid, error in failed_users[:10]])  # –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
        if len(failed_users) > 10:
            error_details += f"\n... –∏ –µ—â–µ {len(failed_users) - 10} –æ—à–∏–±–æ–∫"

        await message.answer(f"<b>–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:</b>\n{error_details}", parse_mode='HTML')




