from typing import Callable, Dict

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.settings import secrets

price_stars = secrets.get('stars_price')
price_crypto = secrets.get('crypto_price')
price_discount = secrets.get('discount')
sbp_price = secrets.get('sbp_price')


class PaymentCallbackData(CallbackData, prefix=""):
    tag: str
    method: str
    amount: float
    days: int


def payment_keyboard(amount):
    builder = InlineKeyboardBuilder()
    builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠êÔ∏è", pay=True)
    return builder.as_markup()


class TariffKeyboardBuilder:
    def __init__(
            self,
            method: str,
            price: int,
            days: int,
            disc: int,
            currency: str,
            period: str,
            discount_func: Callable[[float, int], float] = None
    ):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞

        :param method: –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        :param price: –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü
        :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–∞—Ä–∏—Ñ–µ
        :param disc: –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
        :param currency: –í–∞–ª—é—Ç–∞ (—Å–∏–º–≤–æ–ª)
        :param period: –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
        :param discount_func: –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏–Ω–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)
        """
        self.method = method
        self.price = price
        self.days = days
        self.disc = disc
        self.currency = currency
        self.period = period
        self.discount_func = discount_func or self.default_discount

    @staticmethod
    def default_discount(amount: float, discount_percent: int) -> float:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏"""
        print(amount * (1 - discount_percent / 100))
        return amount * (1 - discount_percent / 100)

    def calculate_amount(self) -> float:
        """–†–∞—Å—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏"""
        monthly_cost = self.price * (self.days / 30)
        print(monthly_cost)
        return self.discount_func(monthly_cost, self.disc)

    def build(self) -> InlineKeyboardButton:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–æ–º"""
        amount = self.calculate_amount()

        call_data = PaymentCallbackData(
            tag='data',
            method=self.method,
            amount=amount,
            days=self.days
        ).pack()

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        formatted_price = f"{amount:.2f}".rstrip('0').rstrip('.')
        text = f"üîí–ë–ï–ó–õ–ò–ú–ò–¢ - {self.period} | {formatted_price} {self.currency}"

        return InlineKeyboardButton(text=text, callback_data=call_data)


def create_tariff_keyboard(
        tariff: Dict[str, dict],
        method: str,
        base_price,
        discount_func: Callable[[float, int], float] = None
) -> InlineKeyboardMarkup:
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏)
    keyboard = []

    for name, params in tariff.items():
        days = int(params['days'])
        disc = int(params['disc'])
        currency = params['currency']
        period = params['period']

        builder = TariffKeyboardBuilder(
            method=method,
            price=base_price,
            days=days,
            disc=disc,
            currency=currency,
            period=period,
            discount_func=discount_func
        )

        # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ = –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        keyboard.append([builder.build()])
    keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='Premium')])
    keyboard.append([InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='Main')])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)
